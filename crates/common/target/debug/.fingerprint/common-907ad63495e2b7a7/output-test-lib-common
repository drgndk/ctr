{"$message_type":"diagnostic","message":"constructor `command` has the same name as the type","code":{"code":"clippy::self_named_constructors","explanation":null},"level":"warning","spans":[{"file_name":"src/macros/struct_gen.rs","byte_start":3779,"byte_end":3958,"line_start":126,"line_end":126,"column_start":11,"column_end":190,"is_primary":true,"text":[{"text":"          $mod_fn_visibility fn $mod_fn_name$(<$($mod_fn_generic_param$(: $mod_fn_generic_constraint)?),*>)?($($mod_fn_arg_name: $mod_fn_arg_type),*) $(-> $mod_fn_return_type)? $mod_fn_body","highlight_start":11,"highlight_end":190}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/command/mod.rs","byte_start":346,"byte_end":3633,"line_start":21,"line_end":146,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"struct_gen! {","highlight_start":1,"highlight_end":14},{"text":"  pub struct Command use Clone {","highlight_start":1,"highlight_end":33},{"text":"    let example: Option<String> = None;","highlight_start":1,"highlight_end":40},{"text":"    let about: String = \"No description provided.\".to_owned();","highlight_start":1,"highlight_end":63},{"text":"    let command_type: CommandType = CommandType::Other {","highlight_start":1,"highlight_end":57},{"text":"      name: String::new()","highlight_start":1,"highlight_end":26},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod preset_costructors {","highlight_start":1,"highlight_end":27},{"text":"    #[doc = \"generate a Command struct for the `-h/--help` flag\"]","highlight_start":1,"highlight_end":66},{"text":"    pub fn help_flag() -> Self {","highlight_start":1,"highlight_end":33},{"text":"      Self::flag(\"help\", \"Prints this message.\")","highlight_start":1,"highlight_end":49},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod argument_constructor {","highlight_start":1,"highlight_end":29},{"text":"    pub fn option(name: impl Into<String>, example: impl Into<String>, about: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":107},{"text":"      let name = name.into().to_lowercase();","highlight_start":1,"highlight_end":45},{"text":"      if name.is_empty() {","highlight_start":1,"highlight_end":27},{"text":"        panic!(\"`long` cannot be empty.\");","highlight_start":1,"highlight_end":43},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        example: Some(example.into()),","highlight_start":1,"highlight_end":39},{"text":"        about: about.into(),","highlight_start":1,"highlight_end":29},{"text":"        command_type: CommandType::Flag {","highlight_start":1,"highlight_end":42},{"text":"          short: name.chars().next().unwrap_or_else(|| {","highlight_start":1,"highlight_end":57},{"text":"            panic!(\"`short` cannot be empty.\");","highlight_start":1,"highlight_end":48},{"text":"          }),","highlight_start":1,"highlight_end":14},{"text":"          name,","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn long_option(name: impl Into<String>, example: impl Into<String>, about: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":112},{"text":"      let name = name.into().to_lowercase();","highlight_start":1,"highlight_end":45},{"text":"      if name.is_empty() {","highlight_start":1,"highlight_end":27},{"text":"        panic!(\"`long` cannot be empty.\");","highlight_start":1,"highlight_end":43},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        example: Some(example.into()),","highlight_start":1,"highlight_end":39},{"text":"        about: about.into(),","highlight_start":1,"highlight_end":29},{"text":"        command_type: CommandType::LongFlag {","highlight_start":1,"highlight_end":46},{"text":"          name,","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn flag(name: impl Into<String>, about: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":77},{"text":"      let name = name.into().to_lowercase();","highlight_start":1,"highlight_end":45},{"text":"      if name.is_empty() {","highlight_start":1,"highlight_end":27},{"text":"        panic!(\"`long` cannot be empty.\");","highlight_start":1,"highlight_end":43},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        example: None,","highlight_start":1,"highlight_end":23},{"text":"        about: about.into(),","highlight_start":1,"highlight_end":29},{"text":"        command_type: CommandType::Flag {","highlight_start":1,"highlight_end":42},{"text":"          short: name.chars().next().unwrap_or_else(|| {","highlight_start":1,"highlight_end":57},{"text":"            panic!(\"`short` cannot be empty.\");","highlight_start":1,"highlight_end":48},{"text":"          }).to_ascii_uppercase(),","highlight_start":1,"highlight_end":35},{"text":"          name,","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn long_flag(name: impl Into<String>, about: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":82},{"text":"      let name = name.into().to_lowercase();","highlight_start":1,"highlight_end":45},{"text":"      if name.is_empty() {","highlight_start":1,"highlight_end":27},{"text":"        panic!(\"`long` cannot be empty.\");","highlight_start":1,"highlight_end":43},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        example: None,","highlight_start":1,"highlight_end":23},{"text":"        about: about.into(),","highlight_start":1,"highlight_end":29},{"text":"        command_type: CommandType::LongFlag {","highlight_start":1,"highlight_end":46},{"text":"          name,","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod operation_constructor {","highlight_start":1,"highlight_end":30},{"text":"    pub fn operation(name: impl Into<String>, example: impl Into<String>, about: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":110},{"text":"      let name = name.into().to_lowercase();","highlight_start":1,"highlight_end":45},{"text":"      if name.is_empty() {","highlight_start":1,"highlight_end":27},{"text":"        panic!(\"`name` cannot be empty.\");","highlight_start":1,"highlight_end":43},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        example: Some(example.into()),","highlight_start":1,"highlight_end":39},{"text":"        about: about.into(),","highlight_start":1,"highlight_end":29},{"text":"        command_type: CommandType::Operation {","highlight_start":1,"highlight_end":47},{"text":"          name,","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn command(name: impl Into<String>, about: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":80},{"text":"      let name = name.into().to_lowercase();","highlight_start":1,"highlight_end":45},{"text":"      if name.is_empty() {","highlight_start":1,"highlight_end":27},{"text":"        panic!(\"`name` cannot be empty.\");","highlight_start":1,"highlight_end":43},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        example: None,","highlight_start":1,"highlight_end":23},{"text":"        about: about.into(),","highlight_start":1,"highlight_end":29},{"text":"        command_type: CommandType::Operation {","highlight_start":1,"highlight_end":47},{"text":"          name,","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn variadic(name: impl Into<String>, about: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":81},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        example: None,","highlight_start":1,"highlight_end":23},{"text":"        about: about.into(),","highlight_start":1,"highlight_end":29},{"text":"        command_type: CommandType::Variadic {","highlight_start":1,"highlight_end":46},{"text":"          name: format!(\"...{}\", name.into()),","highlight_start":1,"highlight_end":47},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"struct_gen!","def_site_span":{"file_name":"src/macros/struct_gen.rs","byte_start":836,"byte_end":859,"line_start":36,"line_end":36,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! struct_gen {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::self_named_constructors)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: constructor `command` has the same name as the type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/macros/struct_gen.rs:126:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   $mod_fn_visibility fn $mod_fn_name$(<$($mod_fn_generic_param$(: $mod_fn_generic_constraint)?),*>)?($($mod_fn_arg_name: $mod_fn_arg_type),*) $(-> $mod_fn_return_type)? $mod_fn_body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/command/mod.rs:21:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct_gen! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  pub struct Command use Clone {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let example: Option<String> = None;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let about: String = \"No description provided.\".to_owned();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::self_named_constructors)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `struct_gen` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true","code":{"code":"clippy::from_over_into","explanation":null},"level":"warning","spans":[{"file_name":"src/macros/enum_gen.rs","byte_start":3661,"byte_end":3717,"line_start":139,"line_end":139,"column_start":7,"column_end":63,"is_primary":true,"text":[{"text":"      impl $impl_trait$(<$($impl_generics),*>)? for $enum_name {","highlight_start":7,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/string/ansi.rs","byte_start":1065,"byte_end":5344,"line_start":48,"line_end":162,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"enum_gen! {","highlight_start":1,"highlight_end":12},{"text":"  pub enum Effect use PartialEq, PartialOrd, Eq, Ord, Clone {","highlight_start":1,"highlight_end":62},{"text":"    Reset,","highlight_start":1,"highlight_end":11},{"text":"    Bold,","highlight_start":1,"highlight_end":10},{"text":"    Italic,","highlight_start":1,"highlight_end":12},{"text":"    Underline,","highlight_start":1,"highlight_end":15},{"text":"    Blink,","highlight_start":1,"highlight_end":11},{"text":"    Inverse,","highlight_start":1,"highlight_end":13},{"text":"    Hidden,","highlight_start":1,"highlight_end":12},{"text":"    Strikethrough,","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Black,","highlight_start":1,"highlight_end":11},{"text":"    Red,","highlight_start":1,"highlight_end":9},{"text":"    Green,","highlight_start":1,"highlight_end":11},{"text":"    Yellow,","highlight_start":1,"highlight_end":12},{"text":"    Blue,","highlight_start":1,"highlight_end":10},{"text":"    Magenta,","highlight_start":1,"highlight_end":13},{"text":"    Cyan,","highlight_start":1,"highlight_end":10},{"text":"    White,","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    BrightBlack,","highlight_start":1,"highlight_end":17},{"text":"    BrightRed,","highlight_start":1,"highlight_end":15},{"text":"    BrightGreen,","highlight_start":1,"highlight_end":17},{"text":"    BrightYellow,","highlight_start":1,"highlight_end":18},{"text":"    BrightBlue,","highlight_start":1,"highlight_end":16},{"text":"    BrightMagenta,","highlight_start":1,"highlight_end":19},{"text":"    BrightCyan,","highlight_start":1,"highlight_end":16},{"text":"    BrightWhite,","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    BlackBackground,","highlight_start":1,"highlight_end":21},{"text":"    RedBackground,","highlight_start":1,"highlight_end":19},{"text":"    GreenBackground,","highlight_start":1,"highlight_end":21},{"text":"    YellowBackground,","highlight_start":1,"highlight_end":22},{"text":"    BlueBackground,","highlight_start":1,"highlight_end":20},{"text":"    MagentaBackground,","highlight_start":1,"highlight_end":23},{"text":"    CyanBackground,","highlight_start":1,"highlight_end":20},{"text":"    WhiteBackground,","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    BrightBlackBackground,","highlight_start":1,"highlight_end":27},{"text":"    BrightRedBackground,","highlight_start":1,"highlight_end":25},{"text":"    BrightGreenBackground,","highlight_start":1,"highlight_end":27},{"text":"    BrightYellowBackground,","highlight_start":1,"highlight_end":28},{"text":"    BrightBlueBackground,","highlight_start":1,"highlight_end":26},{"text":"    BrightMagentaBackground,","highlight_start":1,"highlight_end":29},{"text":"    BrightCyanBackground,","highlight_start":1,"highlight_end":26},{"text":"    BrightWhiteBackground,","highlight_start":1,"highlight_end":27},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl Into<String> {","highlight_start":1,"highlight_end":22},{"text":"    fn into(self: Self) -> String {","highlight_start":1,"highlight_end":36},{"text":"      self.to_ansi()","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod utils {","highlight_start":1,"highlight_end":14},{"text":"    fn return_base(base: Effect, settings: &EffectSettings) -> u8 {","highlight_start":1,"highlight_end":68},{"text":"      base.get_ansi_value()","highlight_start":1,"highlight_end":28},{"text":"        .saturating_add(if settings.bg { 10 } else { 0 })","highlight_start":1,"highlight_end":58},{"text":"        .saturating_add(if settings.bright { 60 } else { 0 })","highlight_start":1,"highlight_end":62},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn get_ansi_value(self: &Self) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"      match self {","highlight_start":1,"highlight_end":19},{"text":"        Self::Reset => 0,","highlight_start":1,"highlight_end":26},{"text":"        Self::Bold => 1,","highlight_start":1,"highlight_end":25},{"text":"        Self::Italic => 3,","highlight_start":1,"highlight_end":27},{"text":"        Self::Underline => 4,","highlight_start":1,"highlight_end":30},{"text":"        Self::Blink => 5,","highlight_start":1,"highlight_end":26},{"text":"        Self::Inverse => 7,","highlight_start":1,"highlight_end":28},{"text":"        Self::Hidden => 8,","highlight_start":1,"highlight_end":27},{"text":"        Self::Strikethrough => 9,","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Self::Black => 30,","highlight_start":1,"highlight_end":27},{"text":"        Self::Red => 31,","highlight_start":1,"highlight_end":25},{"text":"        Self::Green => 32,","highlight_start":1,"highlight_end":27},{"text":"        Self::Yellow => 33,","highlight_start":1,"highlight_end":28},{"text":"        Self::Blue => 34,","highlight_start":1,"highlight_end":26},{"text":"        Self::Magenta => 35,","highlight_start":1,"highlight_end":29},{"text":"        Self::Cyan => 36,","highlight_start":1,"highlight_end":26},{"text":"        Self::White => 37,","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Self::BrightBlack => Self::return_base(Self::Black, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":101},{"text":"        Self::BrightRed => Self::return_base(Self::Red, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":97},{"text":"        Self::BrightGreen => Self::return_base(Self::Green, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":101},{"text":"        Self::BrightYellow => Self::return_base(Self::Yellow, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":103},{"text":"        Self::BrightBlue => Self::return_base(Self::Blue, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":99},{"text":"        Self::BrightMagenta => Self::return_base(Self::Magenta, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":105},{"text":"        Self::BrightCyan => Self::return_base(Self::Cyan, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":99},{"text":"        Self::BrightWhite => Self::return_base(Self::White, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":101},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Self::BlackBackground => Self::return_base(Self::Black, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":105},{"text":"        Self::RedBackground => Self::return_base(Self::Red, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":101},{"text":"        Self::GreenBackground => Self::return_base(Self::Green, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":105},{"text":"        Self::YellowBackground => Self::return_base(Self::Yellow, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":107},{"text":"        Self::BlueBackground => Self::return_base(Self::Blue, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":103},{"text":"        Self::MagentaBackground => Self::return_base(Self::Magenta, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":109},{"text":"        Self::CyanBackground => Self::return_base(Self::Cyan, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":103},{"text":"        Self::WhiteBackground => Self::return_base(Self::White, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":105},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Self::BrightBlackBackground => Self::return_base(Self::Black, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":110},{"text":"        Self::BrightRedBackground => Self::return_base(Self::Red, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":106},{"text":"        Self::BrightGreenBackground => Self::return_base(Self::Green, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":110},{"text":"        Self::BrightYellowBackground => Self::return_base(Self::Yellow, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":112},{"text":"        Self::BrightBlueBackground => Self::return_base(Self::Blue, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":108},{"text":"        Self::BrightMagentaBackground => Self::return_base(Self::Magenta, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":114},{"text":"        Self::BrightCyanBackground => Self::return_base(Self::Cyan, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":108},{"text":"        Self::BrightWhiteBackground => Self::return_base(Self::White, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":110},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn to_ansi(self: &Self) -> String {","highlight_start":1,"highlight_end":44},{"text":"      format!(\"\\x1b[{value}m\", value = self.get_ansi_value())","highlight_start":1,"highlight_end":62},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"enum_gen!","def_site_span":{"file_name":"src/macros/enum_gen.rs","byte_start":961,"byte_end":982,"line_start":41,"line_end":41,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! enum_gen {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\nhttps://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::from_over_into)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace the `Into` implementation with `From<string::ansi::Effect>`","code":null,"level":"help","spans":[{"file_name":"src/string/ansi.rs","byte_start":1862,"byte_end":1866,"line_start":96,"line_end":96,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"  impl Into<String> {","highlight_start":8,"highlight_end":12}],"label":null,"suggested_replacement":"From","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/string/ansi.rs","byte_start":1867,"byte_end":1873,"line_start":96,"line_end":96,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"  impl Into<String> {","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"$enum_name","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/macros/enum_gen.rs","byte_start":3707,"byte_end":3717,"line_start":139,"line_end":139,"column_start":53,"column_end":63,"is_primary":true,"text":[{"text":"      impl $impl_trait$(<$($impl_generics),*>)? for $enum_name {","highlight_start":53,"highlight_end":63}],"label":null,"suggested_replacement":"String","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/string/ansi.rs","byte_start":1065,"byte_end":5344,"line_start":48,"line_end":162,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"enum_gen! {","highlight_start":1,"highlight_end":12},{"text":"  pub enum Effect use PartialEq, PartialOrd, Eq, Ord, Clone {","highlight_start":1,"highlight_end":62},{"text":"    Reset,","highlight_start":1,"highlight_end":11},{"text":"    Bold,","highlight_start":1,"highlight_end":10},{"text":"    Italic,","highlight_start":1,"highlight_end":12},{"text":"    Underline,","highlight_start":1,"highlight_end":15},{"text":"    Blink,","highlight_start":1,"highlight_end":11},{"text":"    Inverse,","highlight_start":1,"highlight_end":13},{"text":"    Hidden,","highlight_start":1,"highlight_end":12},{"text":"    Strikethrough,","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Black,","highlight_start":1,"highlight_end":11},{"text":"    Red,","highlight_start":1,"highlight_end":9},{"text":"    Green,","highlight_start":1,"highlight_end":11},{"text":"    Yellow,","highlight_start":1,"highlight_end":12},{"text":"    Blue,","highlight_start":1,"highlight_end":10},{"text":"    Magenta,","highlight_start":1,"highlight_end":13},{"text":"    Cyan,","highlight_start":1,"highlight_end":10},{"text":"    White,","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    BrightBlack,","highlight_start":1,"highlight_end":17},{"text":"    BrightRed,","highlight_start":1,"highlight_end":15},{"text":"    BrightGreen,","highlight_start":1,"highlight_end":17},{"text":"    BrightYellow,","highlight_start":1,"highlight_end":18},{"text":"    BrightBlue,","highlight_start":1,"highlight_end":16},{"text":"    BrightMagenta,","highlight_start":1,"highlight_end":19},{"text":"    BrightCyan,","highlight_start":1,"highlight_end":16},{"text":"    BrightWhite,","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    BlackBackground,","highlight_start":1,"highlight_end":21},{"text":"    RedBackground,","highlight_start":1,"highlight_end":19},{"text":"    GreenBackground,","highlight_start":1,"highlight_end":21},{"text":"    YellowBackground,","highlight_start":1,"highlight_end":22},{"text":"    BlueBackground,","highlight_start":1,"highlight_end":20},{"text":"    MagentaBackground,","highlight_start":1,"highlight_end":23},{"text":"    CyanBackground,","highlight_start":1,"highlight_end":20},{"text":"    WhiteBackground,","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    BrightBlackBackground,","highlight_start":1,"highlight_end":27},{"text":"    BrightRedBackground,","highlight_start":1,"highlight_end":25},{"text":"    BrightGreenBackground,","highlight_start":1,"highlight_end":27},{"text":"    BrightYellowBackground,","highlight_start":1,"highlight_end":28},{"text":"    BrightBlueBackground,","highlight_start":1,"highlight_end":26},{"text":"    BrightMagentaBackground,","highlight_start":1,"highlight_end":29},{"text":"    BrightCyanBackground,","highlight_start":1,"highlight_end":26},{"text":"    BrightWhiteBackground,","highlight_start":1,"highlight_end":27},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl Into<String> {","highlight_start":1,"highlight_end":22},{"text":"    fn into(self: Self) -> String {","highlight_start":1,"highlight_end":36},{"text":"      self.to_ansi()","highlight_start":1,"highlight_end":21},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod utils {","highlight_start":1,"highlight_end":14},{"text":"    fn return_base(base: Effect, settings: &EffectSettings) -> u8 {","highlight_start":1,"highlight_end":68},{"text":"      base.get_ansi_value()","highlight_start":1,"highlight_end":28},{"text":"        .saturating_add(if settings.bg { 10 } else { 0 })","highlight_start":1,"highlight_end":58},{"text":"        .saturating_add(if settings.bright { 60 } else { 0 })","highlight_start":1,"highlight_end":62},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn get_ansi_value(self: &Self) -> u8 {","highlight_start":1,"highlight_end":47},{"text":"      match self {","highlight_start":1,"highlight_end":19},{"text":"        Self::Reset => 0,","highlight_start":1,"highlight_end":26},{"text":"        Self::Bold => 1,","highlight_start":1,"highlight_end":25},{"text":"        Self::Italic => 3,","highlight_start":1,"highlight_end":27},{"text":"        Self::Underline => 4,","highlight_start":1,"highlight_end":30},{"text":"        Self::Blink => 5,","highlight_start":1,"highlight_end":26},{"text":"        Self::Inverse => 7,","highlight_start":1,"highlight_end":28},{"text":"        Self::Hidden => 8,","highlight_start":1,"highlight_end":27},{"text":"        Self::Strikethrough => 9,","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Self::Black => 30,","highlight_start":1,"highlight_end":27},{"text":"        Self::Red => 31,","highlight_start":1,"highlight_end":25},{"text":"        Self::Green => 32,","highlight_start":1,"highlight_end":27},{"text":"        Self::Yellow => 33,","highlight_start":1,"highlight_end":28},{"text":"        Self::Blue => 34,","highlight_start":1,"highlight_end":26},{"text":"        Self::Magenta => 35,","highlight_start":1,"highlight_end":29},{"text":"        Self::Cyan => 36,","highlight_start":1,"highlight_end":26},{"text":"        Self::White => 37,","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Self::BrightBlack => Self::return_base(Self::Black, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":101},{"text":"        Self::BrightRed => Self::return_base(Self::Red, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":97},{"text":"        Self::BrightGreen => Self::return_base(Self::Green, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":101},{"text":"        Self::BrightYellow => Self::return_base(Self::Yellow, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":103},{"text":"        Self::BrightBlue => Self::return_base(Self::Blue, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":99},{"text":"        Self::BrightMagenta => Self::return_base(Self::Magenta, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":105},{"text":"        Self::BrightCyan => Self::return_base(Self::Cyan, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":99},{"text":"        Self::BrightWhite => Self::return_base(Self::White, &EffectSettings::generate(true, false)),","highlight_start":1,"highlight_end":101},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Self::BlackBackground => Self::return_base(Self::Black, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":105},{"text":"        Self::RedBackground => Self::return_base(Self::Red, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":101},{"text":"        Self::GreenBackground => Self::return_base(Self::Green, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":105},{"text":"        Self::YellowBackground => Self::return_base(Self::Yellow, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":107},{"text":"        Self::BlueBackground => Self::return_base(Self::Blue, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":103},{"text":"        Self::MagentaBackground => Self::return_base(Self::Magenta, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":109},{"text":"        Self::CyanBackground => Self::return_base(Self::Cyan, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":103},{"text":"        Self::WhiteBackground => Self::return_base(Self::White, &EffectSettings::generate(false, true)),","highlight_start":1,"highlight_end":105},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Self::BrightBlackBackground => Self::return_base(Self::Black, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":110},{"text":"        Self::BrightRedBackground => Self::return_base(Self::Red, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":106},{"text":"        Self::BrightGreenBackground => Self::return_base(Self::Green, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":110},{"text":"        Self::BrightYellowBackground => Self::return_base(Self::Yellow, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":112},{"text":"        Self::BrightBlueBackground => Self::return_base(Self::Blue, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":108},{"text":"        Self::BrightMagentaBackground => Self::return_base(Self::Magenta, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":114},{"text":"        Self::BrightCyanBackground => Self::return_base(Self::Cyan, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":108},{"text":"        Self::BrightWhiteBackground => Self::return_base(Self::White, &EffectSettings::generate(true, true)),","highlight_start":1,"highlight_end":110},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn to_ansi(self: &Self) -> String {","highlight_start":1,"highlight_end":44},{"text":"      format!(\"\\x1b[{value}m\", value = self.get_ansi_value())","highlight_start":1,"highlight_end":62},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"enum_gen!","def_site_span":{"file_name":"src/macros/enum_gen.rs","byte_start":961,"byte_end":982,"line_start":41,"line_end":41,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! enum_gen {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/string/ansi.rs","byte_start":1884,"byte_end":1888,"line_start":97,"line_end":97,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    fn into(self: Self) -> String {","highlight_start":8,"highlight_end":12}],"label":null,"suggested_replacement":"from","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/string/ansi.rs","byte_start":1889,"byte_end":1893,"line_start":97,"line_end":97,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    fn into(self: Self) -> String {","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"val: $enum_name","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/string/ansi.rs","byte_start":1904,"byte_end":1910,"line_start":97,"line_end":97,"column_start":28,"column_end":34,"is_primary":true,"text":[{"text":"    fn into(self: Self) -> String {","highlight_start":28,"highlight_end":34}],"label":null,"suggested_replacement":"Self","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/string/ansi.rs","byte_start":1919,"byte_end":1923,"line_start":98,"line_end":98,"column_start":7,"column_end":11,"is_primary":true,"text":[{"text":"      self.to_ansi()","highlight_start":7,"highlight_end":11}],"label":null,"suggested_replacement":"val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/macros/enum_gen.rs:139:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m      impl $impl_trait$(<$($impl_generics),*>)? for $enum_name {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/string/ansi.rs:48:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0menum_gen! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  pub enum Effect use PartialEq, PartialOrd, Eq, Ord, Clone {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Reset,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Bold,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\u001b[0m\n\u001b[0m            https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::from_over_into)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `enum_gen` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference","code":{"code":"clippy::wrong_self_convention","explanation":null},"level":"warning","spans":[{"file_name":"src/macros/enum_gen.rs","byte_start":2550,"byte_end":2554,"line_start":95,"line_end":95,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"      pub fn to_string(self) -> String {","highlight_start":24,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/string/mod.rs","byte_start":315,"byte_end":825,"line_start":19,"line_end":35,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"enum_gen! {","highlight_start":1,"highlight_end":12},{"text":"  enum Tags {","highlight_start":1,"highlight_end":14},{"text":"    PreventsPanic","highlight_start":1,"highlight_end":18},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod implementations {","highlight_start":1,"highlight_end":24},{"text":"    pub fn to_ansi(self: &Self) -> Option<StringV2> {","highlight_start":1,"highlight_end":54},{"text":"      // They should only be used in debug modes to prevent misuse/unwanted behavior.","highlight_start":1,"highlight_end":86},{"text":"      match self {","highlight_start":1,"highlight_end":19},{"text":"        #[cfg(debug_assertions)]","highlight_start":1,"highlight_end":33},{"text":"        Self::PreventsPanic => Some(StringV2::from(\"<redbackground><red>[</red><bold>THIS MESSAGE PREVENTS A PANIC!</bold><red>]</red></redbackground>\").render_ansi()),","highlight_start":1,"highlight_end":169},{"text":"        #[allow(unreachable_patterns)]","highlight_start":1,"highlight_end":39},{"text":"        _ => None","highlight_start":1,"highlight_end":18},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"enum_gen!","def_site_span":{"file_name":"src/macros/enum_gen.rs","byte_start":961,"byte_end":982,"line_start":41,"line_end":41,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! enum_gen {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider choosing a less ambiguous name","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::wrong_self_convention)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/macros/enum_gen.rs:95:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m      pub fn to_string(self) -> String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/string/mod.rs:19:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0menum_gen! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  enum Tags {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    PreventsPanic\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider choosing a less ambiguous name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::wrong_self_convention)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `enum_gen` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true","code":{"code":"clippy::from_over_into","explanation":null},"level":"warning","spans":[{"file_name":"src/macros/struct_gen.rs","byte_start":4030,"byte_end":4092,"line_start":133,"line_end":133,"column_start":7,"column_end":69,"is_primary":true,"text":[{"text":"      impl $($impl_path)::*$(<$($impl_generic),*>)? for $struct_name {","highlight_start":7,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/string/mod.rs","byte_start":827,"byte_end":20800,"line_start":37,"line_end":786,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"struct_gen! {","highlight_start":1,"highlight_end":14},{"text":"  pub struct StringV2 use PartialEq, PartialOrd, Eq, Ord {","highlight_start":1,"highlight_end":59},{"text":"    pub(super) let &mut buffer: Buffer = Buffer::new();","highlight_start":1,"highlight_end":56},{"text":"    let global_effects: EffectArray = EffectArray::new();","highlight_start":1,"highlight_end":58},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl PartialEq<String> {","highlight_start":1,"highlight_end":27},{"text":"    fn eq(self: &Self, other: &String) -> bool {","highlight_start":1,"highlight_end":49},{"text":"      self.to_string() == *other","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl PartialEq<str> {","highlight_start":1,"highlight_end":24},{"text":"    fn eq(self: &Self, other: &str) -> bool {","highlight_start":1,"highlight_end":46},{"text":"      self.to_string().as_str() == other","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<char> {","highlight_start":1,"highlight_end":20},{"text":"    fn from(ch: char) -> Self {","highlight_start":1,"highlight_end":32},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer: Buffer::from(ch),","highlight_start":1,"highlight_end":34},{"text":"        global_effects: EffectArray::new(),","highlight_start":1,"highlight_end":44},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<Vec<u8>> {","highlight_start":1,"highlight_end":23},{"text":"    fn from(bytes: Vec<u8>) -> Self {","highlight_start":1,"highlight_end":38},{"text":"      Self::from(Buffer::from(bytes))","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<&[u8]> {","highlight_start":1,"highlight_end":21},{"text":"    fn from(byte_slice: &[u8]) -> Self {","highlight_start":1,"highlight_end":41},{"text":"      Self::from(byte_slice.to_vec())","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<Buffer> {","highlight_start":1,"highlight_end":22},{"text":"    fn from(buffer: Buffer) -> Self {","highlight_start":1,"highlight_end":38},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer,","highlight_start":1,"highlight_end":16},{"text":"        global_effects: EffectArray::new(),","highlight_start":1,"highlight_end":44},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<&Buffer> {","highlight_start":1,"highlight_end":23},{"text":"    fn from(buffer: &Buffer) -> Self {","highlight_start":1,"highlight_end":39},{"text":"      Self::from(buffer.clone())","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<&str> {","highlight_start":1,"highlight_end":20},{"text":"    fn from(s: &str) -> Self {","highlight_start":1,"highlight_end":31},{"text":"      if s.is_empty() {","highlight_start":1,"highlight_end":24},{"text":"        return Self::new();","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self::from(s.as_bytes().to_vec())","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<String> {","highlight_start":1,"highlight_end":22},{"text":"    fn from(s: String) -> Self {","highlight_start":1,"highlight_end":33},{"text":"      if s.is_empty() {","highlight_start":1,"highlight_end":24},{"text":"        return Self::new();","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self::from(s.as_bytes().to_vec())","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<&String> {","highlight_start":1,"highlight_end":23},{"text":"    fn from(s: &String) -> Self {","highlight_start":1,"highlight_end":34},{"text":"      if s.is_empty() {","highlight_start":1,"highlight_end":24},{"text":"        return Self::new();","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self::from(s.as_bytes().to_vec())","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl Into<String> {","highlight_start":1,"highlight_end":22},{"text":"    fn into(self: Self) -> String {","highlight_start":1,"highlight_end":36},{"text":"      self.to_string()","highlight_start":1,"highlight_end":23},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl Display {","highlight_start":1,"highlight_end":17},{"text":"    #[inline]","highlight_start":1,"highlight_end":14},{"text":"    fn fmt(self: &Self, f: &mut Formatter) -> std::fmt::Result {","highlight_start":1,"highlight_end":65},{"text":"      write!(f, \"{}\", self.render_ansi().to_string())","highlight_start":1,"highlight_end":54},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl Clone {","highlight_start":1,"highlight_end":15},{"text":"    fn clone(self: &StringV2) -> Self {","highlight_start":1,"highlight_end":40},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer: self.buffer.clone(),","highlight_start":1,"highlight_end":37},{"text":"        global_effects: self.global_effects.clone(),","highlight_start":1,"highlight_end":53},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn clone_from(self: &mut StringV2, source: &StringV2) {","highlight_start":1,"highlight_end":60},{"text":"      self.buffer.clone_from(&source.buffer);","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod constructor {","highlight_start":1,"highlight_end":20},{"text":"    pub fn with_capacity(capacity: usize) -> Self {","highlight_start":1,"highlight_end":52},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer: Buffer::with_capacity(capacity),","highlight_start":1,"highlight_end":49},{"text":"        global_effects: EffectArray::new(),","highlight_start":1,"highlight_end":44},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn from_utf8(vec: Vec<u8>) -> Result<Self, FromUtf8Error> {","highlight_start":1,"highlight_end":68},{"text":"      match String::from_utf8(vec.clone()) {","highlight_start":1,"highlight_end":45},{"text":"        Ok(..) => Ok(Self {","highlight_start":1,"highlight_end":28},{"text":"          buffer: Buffer::from(vec),","highlight_start":1,"highlight_end":37},{"text":"          global_effects: EffectArray::new(),","highlight_start":1,"highlight_end":46},{"text":"        }),","highlight_start":1,"highlight_end":12},{"text":"        Err(error) => Err(error),","highlight_start":1,"highlight_end":34},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn to_owned(self: &Self) -> Self {","highlight_start":1,"highlight_end":43},{"text":"      self.clone()","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod buffer_compatibility {","highlight_start":1,"highlight_end":29},{"text":"    pub fn len(self: &Self) -> usize {","highlight_start":1,"highlight_end":39},{"text":"      self.buffer.size()","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn push(self: &mut Self, byte: impl Into<char>) {","highlight_start":1,"highlight_end":58},{"text":"      if let Err(err) = self.buffer_mut().push_safe(byte.into() as u8) {","highlight_start":1,"highlight_end":73},{"text":"        CONSOLE.panic(format!(\"{err}\"))","highlight_start":1,"highlight_end":40},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn iter(self: &Self) -> Iter<u8> {","highlight_start":1,"highlight_end":43},{"text":"      self.buffer.iter()","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn iter_mut(self: &mut Self) -> IterMut<u8> {","highlight_start":1,"highlight_end":54},{"text":"      self.buffer.iter_mut()","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn is_empty(self: &Self) -> bool {","highlight_start":1,"highlight_end":43},{"text":"      self.buffer.is_empty()","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn clear(self: &mut Self) -> &mut Self {","highlight_start":1,"highlight_end":49},{"text":"      self.buffer_mut().clear();","highlight_start":1,"highlight_end":33},{"text":"      self","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn bytes(self: &Self) -> &Vec<u8> {","highlight_start":1,"highlight_end":44},{"text":"      self.buffer.bytes()","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn bytes_mut(self: &mut Self) -> &mut Vec<u8> {","highlight_start":1,"highlight_end":56},{"text":"      self.buffer.bytes_mut()","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod bytes {","highlight_start":1,"highlight_end":14},{"text":"    pub fn is_whitespace(self: &Self) -> bool {","highlight_start":1,"highlight_end":48},{"text":"      self.iter().all(|&b| b.is_ascii_whitespace())","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod conversions {","highlight_start":1,"highlight_end":20},{"text":"    pub fn to_string(self: &Self) -> String {","highlight_start":1,"highlight_end":46},{"text":"      String::from_utf8_lossy(self.bytes().as_slice()).to_string()","highlight_start":1,"highlight_end":67},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn chars(self: &Self) -> IntoIter<char> {","highlight_start":1,"highlight_end":50},{"text":"      let string = String::from_utf8(self.bytes().clone())","highlight_start":1,"highlight_end":59},{"text":"        .expect(\"Invalid UTF-8 sequence\");","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      string.chars().collect::<Vec<char>>().into_iter()","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod ansi_styles {","highlight_start":1,"highlight_end":20},{"text":"    #[doc = \"Reset all styles and effects.\"]","highlight_start":1,"highlight_end":45},{"text":"    pub fn reset(self: &Self) -> Self {","highlight_start":1,"highlight_end":40},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer: self.buffer.clone(),","highlight_start":1,"highlight_end":37},{"text":"        global_effects: EffectArray::new(),","highlight_start":1,"highlight_end":44},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Bold`\"]","highlight_start":1,"highlight_end":57},{"text":"    pub fn bold(self: &Self) -> Self {","highlight_start":1,"highlight_end":39},{"text":"      self.push_effect(Effect::Bold)","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Italic`\"]","highlight_start":1,"highlight_end":59},{"text":"    pub fn italic(self: &Self) -> Self {","highlight_start":1,"highlight_end":41},{"text":"      self.push_effect(Effect::Italic)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Underline`\"]","highlight_start":1,"highlight_end":62},{"text":"    pub fn underline(self: &Self) -> Self {","highlight_start":1,"highlight_end":44},{"text":"      self.push_effect(Effect::Underline)","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Blink`\"]","highlight_start":1,"highlight_end":58},{"text":"    pub fn blink(self: &Self) -> Self {","highlight_start":1,"highlight_end":40},{"text":"      self.push_effect(Effect::Blink)","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Inverse`\"]","highlight_start":1,"highlight_end":60},{"text":"    pub fn inverse(self: &Self) -> Self {","highlight_start":1,"highlight_end":42},{"text":"      self.push_effect(Effect::Inverse)","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Hidden`\"]","highlight_start":1,"highlight_end":59},{"text":"    pub fn hidden(self: &Self) -> Self {","highlight_start":1,"highlight_end":41},{"text":"      self.push_effect(Effect::Hidden)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Strikethrough`\"]","highlight_start":1,"highlight_end":66},{"text":"    pub fn strike(self: &Self) -> Self {","highlight_start":1,"highlight_end":41},{"text":"      self.push_effect(Effect::Strikethrough)","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Pushes a new global effect.\"]","highlight_start":1,"highlight_end":43},{"text":"    pub fn push_effect(self: &Self, effect: impl Into<Effect>) -> Self {","highlight_start":1,"highlight_end":73},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer: self.buffer.clone(),","highlight_start":1,"highlight_end":37},{"text":"        global_effects: {","highlight_start":1,"highlight_end":26},{"text":"          let mut styles = self.global_effects.clone();","highlight_start":1,"highlight_end":56},{"text":"          styles.push(effect.into());","highlight_start":1,"highlight_end":38},{"text":"          styles","highlight_start":1,"highlight_end":17},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod ansi_implementations {","highlight_start":1,"highlight_end":29},{"text":"    pub fn render_ansi(self: &Self) -> Self {","highlight_start":1,"highlight_end":46},{"text":"      if std::env::var(\"NO_COLOR\").is_ok() {","highlight_start":1,"highlight_end":45},{"text":"        return self.strip_ansi();","highlight_start":1,"highlight_end":34},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut result = Self::new();","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if self.bytes().is_empty() {","highlight_start":1,"highlight_end":35},{"text":"        return result;","highlight_start":1,"highlight_end":23},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut active_styles = self.global_effects().effects().clone();","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut tag_stack: Vec<String> = Vec::new();","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      for style in &active_styles {","highlight_start":1,"highlight_end":36},{"text":"        result.push_str(style.to_ansi());","highlight_start":1,"highlight_end":42},{"text":"        tag_stack.push(style.clone().to_string());","highlight_start":1,"highlight_end":51},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut iter = self.chars().peekable();","highlight_start":1,"highlight_end":46},{"text":"      while let Some(ch) = iter.next() {","highlight_start":1,"highlight_end":41},{"text":"        match ch {","highlight_start":1,"highlight_end":19},{"text":"          ':' => {","highlight_start":1,"highlight_end":19},{"text":"            if let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":50},{"text":"              if next_ch == ':' {","highlight_start":1,"highlight_end":34},{"text":"                result.push_str(\"::\");","highlight_start":1,"highlight_end":39},{"text":"                iter.next();","highlight_start":1,"highlight_end":29},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut code = String::new();","highlight_start":1,"highlight_end":42},{"text":"            let mut ended = false;","highlight_start":1,"highlight_end":35},{"text":"            while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":53},{"text":"              if next_ch == ':' {","highlight_start":1,"highlight_end":34},{"text":"                ended = true;","highlight_start":1,"highlight_end":30},{"text":"                iter.next();","highlight_start":1,"highlight_end":29},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              iter.next();","highlight_start":1,"highlight_end":27},{"text":"              if next_ch == ' ' {","highlight_start":1,"highlight_end":34},{"text":"                ended = true;","highlight_start":1,"highlight_end":30},{"text":"                result.push_str(format!(\":{code} \"));","highlight_start":1,"highlight_end":54},{"text":"                code.clear();","highlight_start":1,"highlight_end":30},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              code.push(next_ch);","highlight_start":1,"highlight_end":34},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if !ended {","highlight_start":1,"highlight_end":24},{"text":"              if code.is_empty() {","highlight_start":1,"highlight_end":35},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              result.push_str(format!(\":{code}\"));","highlight_start":1,"highlight_end":51},{"text":"              continue;","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if code.is_empty() {","highlight_start":1,"highlight_end":33},{"text":"              continue;","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match Tags::try_from(code.as_str()) {","highlight_start":1,"highlight_end":50},{"text":"              Some(code_enum) => {","highlight_start":1,"highlight_end":35},{"text":"                match code_enum.to_ansi() {","highlight_start":1,"highlight_end":44},{"text":"                  Some(ansi) => result.push_str(ansi.to_string()),","highlight_start":1,"highlight_end":67},{"text":"                  None => result.push_str(format!(\":{code}:\"))","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              },","highlight_start":1,"highlight_end":17},{"text":"              None => result.push_str(format!(\":{code}:\"))","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          '<' => {","highlight_start":1,"highlight_end":19},{"text":"            if let Some(next) = iter.peek() {","highlight_start":1,"highlight_end":46},{"text":"              if next == &'>' {","highlight_start":1,"highlight_end":32},{"text":"                result.push_str(\"<>\");","highlight_start":1,"highlight_end":39},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              if next == &'<' {","highlight_start":1,"highlight_end":32},{"text":"                result.push('<');","highlight_start":1,"highlight_end":34},{"text":"                while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":57},{"text":"                  if next_ch != '<' {","highlight_start":1,"highlight_end":38},{"text":"                    break;","highlight_start":1,"highlight_end":27},{"text":"                  }","highlight_start":1,"highlight_end":20},{"text":"                  iter.next();","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut tag = String::new();","highlight_start":1,"highlight_end":41},{"text":"            let mut is_closing_tag = false;","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":53},{"text":"              iter.next();","highlight_start":1,"highlight_end":27},{"text":"              if next_ch == '>' {","highlight_start":1,"highlight_end":34},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              if next_ch == '/' && tag.is_empty() {","highlight_start":1,"highlight_end":52},{"text":"                is_closing_tag = true;","highlight_start":1,"highlight_end":39},{"text":"              } else {","highlight_start":1,"highlight_end":23},{"text":"                tag.push(next_ch);","highlight_start":1,"highlight_end":35},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if tag.is_empty() {","highlight_start":1,"highlight_end":32},{"text":"              continue;","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if is_closing_tag {","highlight_start":1,"highlight_end":32},{"text":"              let last_pos = tag_stack.iter().rposition(|t| *t == tag);","highlight_start":1,"highlight_end":72},{"text":"              if let Some(last_effect) = active_styles.last() {","highlight_start":1,"highlight_end":64},{"text":"                if let Some(effect) = Effect::try_from(&tag) {","highlight_start":1,"highlight_end":63},{"text":"                  if last_effect.ne(&effect) {","highlight_start":1,"highlight_end":47},{"text":"                    if last_pos.is_none() {","highlight_start":1,"highlight_end":44},{"text":"                      CONSOLE.panic(format!(\"You're trying to close the tag </{tag}> before opening it.\\nWhich is illegal\"));","highlight_start":1,"highlight_end":126},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    let last_tag = last_effect.clone().to_string().to_lowercase();","highlight_start":1,"highlight_end":83},{"text":"                    CONSOLE.panic(format!(\"You're trying to close the tag </{tag}> before </{last_tag}>.\\nWhich is illegal\"));","highlight_start":1,"highlight_end":127},{"text":"                  }","highlight_start":1,"highlight_end":20},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              if let Some(pos) = last_pos {","highlight_start":1,"highlight_end":44},{"text":"                tag_stack.truncate(pos);","highlight_start":1,"highlight_end":41},{"text":"                active_styles.truncate(pos);","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                result.push_str(Effect::Reset);","highlight_start":1,"highlight_end":48},{"text":"                for style in &active_styles {","highlight_start":1,"highlight_end":46},{"text":"                  result.push_str(style.to_ansi());","highlight_start":1,"highlight_end":52},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              } else {","highlight_start":1,"highlight_end":23},{"text":"                result.push_str(format!(\"</{tag}>\"));","highlight_start":1,"highlight_end":54},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"              match Effect::try_from(&tag) {","highlight_start":1,"highlight_end":45},{"text":"                Some(effect) => {","highlight_start":1,"highlight_end":34},{"text":"                  active_styles.push(effect.clone());","highlight_start":1,"highlight_end":54},{"text":"                  tag_stack.push(tag.clone());","highlight_start":1,"highlight_end":47},{"text":"                  result.push_str(effect.to_ansi());","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                None => {","highlight_start":1,"highlight_end":26},{"text":"                  result.push_str(format!(\"<{tag}>\"));","highlight_start":1,"highlight_end":55},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          _ => {","highlight_start":1,"highlight_end":17},{"text":"            if ch == '>' {","highlight_start":1,"highlight_end":27},{"text":"              if let Some(next) = iter.peek() {","highlight_start":1,"highlight_end":48},{"text":"                if next == &'>' {","highlight_start":1,"highlight_end":34},{"text":"                  result.push('>');","highlight_start":1,"highlight_end":36},{"text":"                  while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":59},{"text":"                    if next_ch != '>' {","highlight_start":1,"highlight_end":40},{"text":"                      break;","highlight_start":1,"highlight_end":29},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    iter.next();","highlight_start":1,"highlight_end":33},{"text":"                  }","highlight_start":1,"highlight_end":20},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"              result.push(ch);","highlight_start":1,"highlight_end":31},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if !active_styles.is_empty() {","highlight_start":1,"highlight_end":37},{"text":"        while tag_stack.pop().is_some() {","highlight_start":1,"highlight_end":42},{"text":"          if active_styles.pop().is_some() {","highlight_start":1,"highlight_end":45},{"text":"            result.push_str(Effect::Reset);","highlight_start":1,"highlight_end":44},{"text":"            for style in &active_styles {","highlight_start":1,"highlight_end":42},{"text":"              result.push_str(style.to_ansi());","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      result.push_str(Effect::Reset);","highlight_start":1,"highlight_end":38},{"text":"      result","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn strip_ansi(self: &Self) -> Self {","highlight_start":1,"highlight_end":45},{"text":"      let mut result = Self::new();","highlight_start":1,"highlight_end":36},{"text":"      if self.bytes().is_empty() {","highlight_start":1,"highlight_end":35},{"text":"        return result;","highlight_start":1,"highlight_end":23},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut iter = self.chars().peekable();","highlight_start":1,"highlight_end":46},{"text":"      while let Some(ch) = iter.next() {","highlight_start":1,"highlight_end":41},{"text":"        match ch {","highlight_start":1,"highlight_end":19},{"text":"          ':' => {","highlight_start":1,"highlight_end":19},{"text":"            let mut code = String::new();","highlight_start":1,"highlight_end":42},{"text":"            while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":53},{"text":"              if next_ch == ':' {","highlight_start":1,"highlight_end":34},{"text":"                iter.next();","highlight_start":1,"highlight_end":29},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"              code.push(next_ch);","highlight_start":1,"highlight_end":34},{"text":"              iter.next();","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match Tags::try_from(code.as_str()) {","highlight_start":1,"highlight_end":50},{"text":"              Some(code_enum) => {","highlight_start":1,"highlight_end":35},{"text":"                match code_enum.to_ansi() {","highlight_start":1,"highlight_end":44},{"text":"                  Some(ansi) => result.push_str(ansi.strip_ansi().to_string()),","highlight_start":1,"highlight_end":80},{"text":"                  None => result.push_str(format!(\":{code}:\"))","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              },","highlight_start":1,"highlight_end":17},{"text":"              None => result.push_str(format!(\":{code}:\"))","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          '<' => {","highlight_start":1,"highlight_end":19},{"text":"            if let Some(next) = iter.peek() {","highlight_start":1,"highlight_end":46},{"text":"              if next == &'<' {","highlight_start":1,"highlight_end":32},{"text":"                result.push('<');","highlight_start":1,"highlight_end":34},{"text":"                iter.next();","highlight_start":1,"highlight_end":29},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut tag = String::new();","highlight_start":1,"highlight_end":41},{"text":"            while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":53},{"text":"              iter.next();","highlight_start":1,"highlight_end":27},{"text":"              if next_ch == '>' {","highlight_start":1,"highlight_end":34},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              if !(next_ch == '/' && tag.is_empty()) {","highlight_start":1,"highlight_end":55},{"text":"                tag.push(next_ch);","highlight_start":1,"highlight_end":35},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if Effect::try_from(&tag).is_none() {","highlight_start":1,"highlight_end":50},{"text":"              result.push_str(format!(\"<{tag}>\"));","highlight_start":1,"highlight_end":51},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          _ => {","highlight_start":1,"highlight_end":17},{"text":"            if ch == '>' {","highlight_start":1,"highlight_end":27},{"text":"              if let Some(next) = iter.peek() {","highlight_start":1,"highlight_end":48},{"text":"                if next == &'>' {","highlight_start":1,"highlight_end":34},{"text":"                  result.push('>');","highlight_start":1,"highlight_end":36},{"text":"                  iter.next();","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"              result.push(ch);","highlight_start":1,"highlight_end":31},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      result","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod implementations {","highlight_start":1,"highlight_end":24},{"text":"    pub fn nearest(self: &Self, args: Vec<String>) -> Option<String> {","highlight_start":1,"highlight_end":71},{"text":"      let self_str = String::from_utf8(self.bytes().clone())","highlight_start":1,"highlight_end":61},{"text":"        .expect(\"Invalid UTF-8 sequence\");","highlight_start":1,"highlight_end":43},{"text":"      let mut nearest_word: Option<String> = None;","highlight_start":1,"highlight_end":51},{"text":"      let mut min_distance = self.buffer.bytes().capacity().min(usize::MAX);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      for arg in args {","highlight_start":1,"highlight_end":24},{"text":"        let distance = levenshtein::levenshtein(&self_str, &arg);","highlight_start":1,"highlight_end":66},{"text":"        if distance < min_distance {","highlight_start":1,"highlight_end":37},{"text":"          min_distance = distance;","highlight_start":1,"highlight_end":35},{"text":"          nearest_word = Some(arg);","highlight_start":1,"highlight_end":36},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if min_distance == 0 || min_distance <= 2 {","highlight_start":1,"highlight_end":50},{"text":"        nearest_word","highlight_start":1,"highlight_end":21},{"text":"      } else {","highlight_start":1,"highlight_end":15},{"text":"        None","highlight_start":1,"highlight_end":13},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn append(self: &mut Self, other: &Self) {","highlight_start":1,"highlight_end":51},{"text":"      self.buffer_mut().extend_from_buffer(other.buffer());","highlight_start":1,"highlight_end":60},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn char_at(self: &Self, index: usize) -> Option<char> {","highlight_start":1,"highlight_end":64},{"text":"      self.buffer().byte_at(index).map(char::from)","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn concat(self: &Self, other: &Self) -> Self {","highlight_start":1,"highlight_end":55},{"text":"      let mut buffer = self.buffer.clone();","highlight_start":1,"highlight_end":44},{"text":"      buffer.extend_from_buffer(other.buffer());","highlight_start":1,"highlight_end":49},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer,","highlight_start":1,"highlight_end":16},{"text":"        global_effects: self.global_effects.clone(),","highlight_start":1,"highlight_end":53},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn contains(self: &Self, c: char) -> bool {","highlight_start":1,"highlight_end":52},{"text":"      self.index_of(c).is_some()","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn ends_with(self: &Self, suffix: impl Into<String>) -> bool {","highlight_start":1,"highlight_end":71},{"text":"      self.bytes().ends_with(suffix.into().as_bytes())","highlight_start":1,"highlight_end":55},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn includes(self: &Self, needle: impl Into<String>) -> bool {","highlight_start":1,"highlight_end":70},{"text":"      let needle = needle.into();","highlight_start":1,"highlight_end":34},{"text":"      if needle.trim().is_empty() || needle.len() > self.len() {","highlight_start":1,"highlight_end":65},{"text":"        return needle.eq(&self.to_string());","highlight_start":1,"highlight_end":45},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      self.bytes().windows(needle.bytes().len()).any(|window| window == needle.as_bytes())","highlight_start":1,"highlight_end":91},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn index_of(self: &Self, c: char) -> Option<usize> {","highlight_start":1,"highlight_end":61},{"text":"      self.iter().position(|&b| b == c as u8)","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn last_index_of(self: &Self, c: char) -> Option<usize> {","highlight_start":1,"highlight_end":66},{"text":"      self.iter().rposition(|&b| b == c as u8)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(unused_variables)]","highlight_start":1,"highlight_end":31},{"text":"    pub fn matches(self: &Self, pattern: impl Into<String>) -> bool {","highlight_start":1,"highlight_end":70},{"text":"      unimplemented!(\"StringV2::matches is not implemented yet.\");","highlight_start":1,"highlight_end":67},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(unused_variables)]","highlight_start":1,"highlight_end":31},{"text":"    pub fn matches_all(self: &Self, pattern: impl Into<String>) -> bool {","highlight_start":1,"highlight_end":74},{"text":"      unimplemented!(\"StringV2::matches_all is not implemented yet.\");","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn pad_end(self: &Self, target_length: usize, pad_string: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":95},{"text":"      let pad_string = pad_string.into();","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if self.len() >= target_length {","highlight_start":1,"highlight_end":39},{"text":"        return self.clone();","highlight_start":1,"highlight_end":29},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut vec = Vec::with_capacity(target_length);","highlight_start":1,"highlight_end":55},{"text":"      vec.extend_from_slice(&self.bytes().to_vec());","highlight_start":1,"highlight_end":53},{"text":"      vec.extend_from_slice(pad_string.as_bytes());","highlight_start":1,"highlight_end":52},{"text":"      Self::from(vec)","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn pad_start(self: &Self, target_length: usize, pad_string: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":97},{"text":"      let pad_string = pad_string.into();","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if self.len() >= target_length {","highlight_start":1,"highlight_end":39},{"text":"        return self.clone();","highlight_start":1,"highlight_end":29},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut vec = Vec::with_capacity(target_length);","highlight_start":1,"highlight_end":55},{"text":"      vec.extend_from_slice(pad_string.as_bytes());","highlight_start":1,"highlight_end":52},{"text":"      vec.extend_from_slice(&self.bytes().to_vec());","highlight_start":1,"highlight_end":53},{"text":"      Self::from(vec)","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn position(self: &Self, string: impl Into<String>) -> Option<usize> {","highlight_start":1,"highlight_end":79},{"text":"      let string = string.into();","highlight_start":1,"highlight_end":34},{"text":"      self.bytes().windows(string.len()).position(|window| window == string.as_bytes())","highlight_start":1,"highlight_end":88},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn repeat(self: &Self, count: usize) -> Self {","highlight_start":1,"highlight_end":55},{"text":"      let mut vec = Vec::with_capacity(self.len() * count);","highlight_start":1,"highlight_end":60},{"text":"      for _ in 0..count {","highlight_start":1,"highlight_end":26},{"text":"        vec.extend_from_slice(&self.bytes().to_vec());","highlight_start":1,"highlight_end":55},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      Self::from(vec)","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn replace(self: &Self, from: impl Into<String>, to: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":90},{"text":"      let from = from.into();","highlight_start":1,"highlight_end":30},{"text":"      let to = to.into();","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if from.is_empty() {","highlight_start":1,"highlight_end":27},{"text":"        return self.clone();","highlight_start":1,"highlight_end":29},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut vec = Vec::with_capacity(self.len());","highlight_start":1,"highlight_end":52},{"text":"      let mut i = 0;","highlight_start":1,"highlight_end":21},{"text":"      if let Some(index) = self.bytes().windows(from.len()).position(|window| window == from.as_bytes()) {","highlight_start":1,"highlight_end":107},{"text":"        vec.extend_from_slice(&self.bytes()[i..i + index]);","highlight_start":1,"highlight_end":60},{"text":"        vec.extend_from_slice(to.as_bytes());","highlight_start":1,"highlight_end":46},{"text":"        i += index + from.len();","highlight_start":1,"highlight_end":33},{"text":"        vec.extend_from_slice(&self.bytes()[i..]);","highlight_start":1,"highlight_end":51},{"text":"      } else {","highlight_start":1,"highlight_end":15},{"text":"        vec.extend_from_slice(&self.bytes()[i..]);","highlight_start":1,"highlight_end":51},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self::from(vec)","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn replace_all(self: &Self, from: impl Into<String>, to: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":94},{"text":"      let from = from.into();","highlight_start":1,"highlight_end":30},{"text":"      let to = to.into();","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if from.is_empty() {","highlight_start":1,"highlight_end":27},{"text":"        return self.clone();","highlight_start":1,"highlight_end":29},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut last = self.clone();","highlight_start":1,"highlight_end":35},{"text":"      let mut result = self.clone();","highlight_start":1,"highlight_end":37},{"text":"      while result.eq(&last) {","highlight_start":1,"highlight_end":31},{"text":"        result = result.replace(&from, &to);","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if result.eq(&last) {","highlight_start":1,"highlight_end":30},{"text":"          break;","highlight_start":1,"highlight_end":17},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        last = result.clone();","highlight_start":1,"highlight_end":31},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      result","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(unused_variables)]","highlight_start":1,"highlight_end":31},{"text":"    pub fn search(self: &Self, pattern: impl Into<String>) -> Option<usize> {","highlight_start":1,"highlight_end":78},{"text":"      unimplemented!(\"StringV2::search is not implemented yet.\");","highlight_start":1,"highlight_end":66},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn slice(self: &Self, start: usize, end: Option<usize>) -> Self {","highlight_start":1,"highlight_end":74},{"text":"      let end = end.unwrap_or_else(|| self.len());","highlight_start":1,"highlight_end":51},{"text":"      let start = start.min(self.len());","highlight_start":1,"highlight_end":41},{"text":"      let end = end.min(self.len());","highlight_start":1,"highlight_end":37},{"text":"      if start >= end {","highlight_start":1,"highlight_end":24},{"text":"        return Self::new();","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self::from(self.bytes()[start..end].to_vec())","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn split(self: &Self, separator: impl Into<String>) -> Vec<Self> {","highlight_start":1,"highlight_end":75},{"text":"      let separator = separator.into();","highlight_start":1,"highlight_end":40},{"text":"      let mut vec = Vec::new();","highlight_start":1,"highlight_end":32},{"text":"      let mut last = 0;","highlight_start":1,"highlight_end":24},{"text":"      for (i, _) in self.bytes().windows(separator.len()).enumerate() {","highlight_start":1,"highlight_end":72},{"text":"        if &self.bytes()[i..i + separator.len()] == separator.as_bytes() {","highlight_start":1,"highlight_end":75},{"text":"          vec.push(self.slice(last, Some(i)));","highlight_start":1,"highlight_end":47},{"text":"          last = i + separator.len();","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      vec.push(self.slice(last, None));","highlight_start":1,"highlight_end":40},{"text":"      vec","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn starts_with(self: &Self, prefix: impl Into<String>) -> bool {","highlight_start":1,"highlight_end":73},{"text":"      self.bytes().starts_with(prefix.into().as_bytes())","highlight_start":1,"highlight_end":57},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn substring(self: &Self, start: usize, end: usize) -> Self {","highlight_start":1,"highlight_end":70},{"text":"      self.slice(start, Some(end))","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn to_lowercase(self: &Self) -> Self {","highlight_start":1,"highlight_end":47},{"text":"      Self::from(self.bytes().to_ascii_lowercase())","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn to_uppercase(self: &Self) -> Self {","highlight_start":1,"highlight_end":47},{"text":"      Self::from(self.bytes().to_ascii_uppercase())","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn trim(self: &Self) -> Self {","highlight_start":1,"highlight_end":39},{"text":"      let start = self.iter().position(|&b| b != b' ').unwrap_or(0);","highlight_start":1,"highlight_end":69},{"text":"      let end = self","highlight_start":1,"highlight_end":21},{"text":"        .iter()","highlight_start":1,"highlight_end":16},{"text":"        .rposition(|&b| b != b' ')","highlight_start":1,"highlight_end":35},{"text":"        .map_or(0, |pos| pos + 1);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      self.substring(start, end)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn trim_end(self: &Self) -> Self {","highlight_start":1,"highlight_end":43},{"text":"      let end = self","highlight_start":1,"highlight_end":21},{"text":"        .iter()","highlight_start":1,"highlight_end":16},{"text":"        .rposition(|&b| b != b' ')","highlight_start":1,"highlight_end":35},{"text":"        .map_or(0, |pos| pos + 1);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      self.substring(0, end)","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn trim_start(self: &Self) -> Self {","highlight_start":1,"highlight_end":45},{"text":"      let start = self.iter().position(|&b| b != b' ').unwrap_or(0);","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      self.substring(start, self.len())","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod compatibility {","highlight_start":1,"highlight_end":22},{"text":"    pub fn push_str(self: &mut Self, s: impl Into<String>) {","highlight_start":1,"highlight_end":61},{"text":"      let string = s.into();","highlight_start":1,"highlight_end":29},{"text":"      match self.buffer_mut().try_reserve(string.len()) {","highlight_start":1,"highlight_end":58},{"text":"        Ok(_) => self.bytes_mut().extend_from_slice(string.as_bytes()),","highlight_start":1,"highlight_end":72},{"text":"        Err(err) => CONSOLE.panic(format!(\"{err}\"))","highlight_start":1,"highlight_end":52},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"struct_gen!","def_site_span":{"file_name":"src/macros/struct_gen.rs","byte_start":836,"byte_end":859,"line_start":36,"line_end":36,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! struct_gen {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\nhttps://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace the `Into` implementation with `From<string::StringV2>`","code":null,"level":"help","spans":[{"file_name":"src/string/mod.rs","byte_start":2408,"byte_end":2412,"line_start":121,"line_end":121,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"  impl Into<String> {","highlight_start":8,"highlight_end":12}],"label":null,"suggested_replacement":"From","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/string/mod.rs","byte_start":2413,"byte_end":2419,"line_start":121,"line_end":121,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"  impl Into<String> {","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"$struct_name","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/macros/struct_gen.rs","byte_start":4080,"byte_end":4092,"line_start":133,"line_end":133,"column_start":57,"column_end":69,"is_primary":true,"text":[{"text":"      impl $($impl_path)::*$(<$($impl_generic),*>)? for $struct_name {","highlight_start":57,"highlight_end":69}],"label":null,"suggested_replacement":"String","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/string/mod.rs","byte_start":827,"byte_end":20800,"line_start":37,"line_end":786,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"struct_gen! {","highlight_start":1,"highlight_end":14},{"text":"  pub struct StringV2 use PartialEq, PartialOrd, Eq, Ord {","highlight_start":1,"highlight_end":59},{"text":"    pub(super) let &mut buffer: Buffer = Buffer::new();","highlight_start":1,"highlight_end":56},{"text":"    let global_effects: EffectArray = EffectArray::new();","highlight_start":1,"highlight_end":58},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl PartialEq<String> {","highlight_start":1,"highlight_end":27},{"text":"    fn eq(self: &Self, other: &String) -> bool {","highlight_start":1,"highlight_end":49},{"text":"      self.to_string() == *other","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl PartialEq<str> {","highlight_start":1,"highlight_end":24},{"text":"    fn eq(self: &Self, other: &str) -> bool {","highlight_start":1,"highlight_end":46},{"text":"      self.to_string().as_str() == other","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<char> {","highlight_start":1,"highlight_end":20},{"text":"    fn from(ch: char) -> Self {","highlight_start":1,"highlight_end":32},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer: Buffer::from(ch),","highlight_start":1,"highlight_end":34},{"text":"        global_effects: EffectArray::new(),","highlight_start":1,"highlight_end":44},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<Vec<u8>> {","highlight_start":1,"highlight_end":23},{"text":"    fn from(bytes: Vec<u8>) -> Self {","highlight_start":1,"highlight_end":38},{"text":"      Self::from(Buffer::from(bytes))","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<&[u8]> {","highlight_start":1,"highlight_end":21},{"text":"    fn from(byte_slice: &[u8]) -> Self {","highlight_start":1,"highlight_end":41},{"text":"      Self::from(byte_slice.to_vec())","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<Buffer> {","highlight_start":1,"highlight_end":22},{"text":"    fn from(buffer: Buffer) -> Self {","highlight_start":1,"highlight_end":38},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer,","highlight_start":1,"highlight_end":16},{"text":"        global_effects: EffectArray::new(),","highlight_start":1,"highlight_end":44},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<&Buffer> {","highlight_start":1,"highlight_end":23},{"text":"    fn from(buffer: &Buffer) -> Self {","highlight_start":1,"highlight_end":39},{"text":"      Self::from(buffer.clone())","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<&str> {","highlight_start":1,"highlight_end":20},{"text":"    fn from(s: &str) -> Self {","highlight_start":1,"highlight_end":31},{"text":"      if s.is_empty() {","highlight_start":1,"highlight_end":24},{"text":"        return Self::new();","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self::from(s.as_bytes().to_vec())","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<String> {","highlight_start":1,"highlight_end":22},{"text":"    fn from(s: String) -> Self {","highlight_start":1,"highlight_end":33},{"text":"      if s.is_empty() {","highlight_start":1,"highlight_end":24},{"text":"        return Self::new();","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self::from(s.as_bytes().to_vec())","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl From<&String> {","highlight_start":1,"highlight_end":23},{"text":"    fn from(s: &String) -> Self {","highlight_start":1,"highlight_end":34},{"text":"      if s.is_empty() {","highlight_start":1,"highlight_end":24},{"text":"        return Self::new();","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self::from(s.as_bytes().to_vec())","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl Into<String> {","highlight_start":1,"highlight_end":22},{"text":"    fn into(self: Self) -> String {","highlight_start":1,"highlight_end":36},{"text":"      self.to_string()","highlight_start":1,"highlight_end":23},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl Display {","highlight_start":1,"highlight_end":17},{"text":"    #[inline]","highlight_start":1,"highlight_end":14},{"text":"    fn fmt(self: &Self, f: &mut Formatter) -> std::fmt::Result {","highlight_start":1,"highlight_end":65},{"text":"      write!(f, \"{}\", self.render_ansi().to_string())","highlight_start":1,"highlight_end":54},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  impl Clone {","highlight_start":1,"highlight_end":15},{"text":"    fn clone(self: &StringV2) -> Self {","highlight_start":1,"highlight_end":40},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer: self.buffer.clone(),","highlight_start":1,"highlight_end":37},{"text":"        global_effects: self.global_effects.clone(),","highlight_start":1,"highlight_end":53},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn clone_from(self: &mut StringV2, source: &StringV2) {","highlight_start":1,"highlight_end":60},{"text":"      self.buffer.clone_from(&source.buffer);","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod constructor {","highlight_start":1,"highlight_end":20},{"text":"    pub fn with_capacity(capacity: usize) -> Self {","highlight_start":1,"highlight_end":52},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer: Buffer::with_capacity(capacity),","highlight_start":1,"highlight_end":49},{"text":"        global_effects: EffectArray::new(),","highlight_start":1,"highlight_end":44},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn from_utf8(vec: Vec<u8>) -> Result<Self, FromUtf8Error> {","highlight_start":1,"highlight_end":68},{"text":"      match String::from_utf8(vec.clone()) {","highlight_start":1,"highlight_end":45},{"text":"        Ok(..) => Ok(Self {","highlight_start":1,"highlight_end":28},{"text":"          buffer: Buffer::from(vec),","highlight_start":1,"highlight_end":37},{"text":"          global_effects: EffectArray::new(),","highlight_start":1,"highlight_end":46},{"text":"        }),","highlight_start":1,"highlight_end":12},{"text":"        Err(error) => Err(error),","highlight_start":1,"highlight_end":34},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn to_owned(self: &Self) -> Self {","highlight_start":1,"highlight_end":43},{"text":"      self.clone()","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod buffer_compatibility {","highlight_start":1,"highlight_end":29},{"text":"    pub fn len(self: &Self) -> usize {","highlight_start":1,"highlight_end":39},{"text":"      self.buffer.size()","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn push(self: &mut Self, byte: impl Into<char>) {","highlight_start":1,"highlight_end":58},{"text":"      if let Err(err) = self.buffer_mut().push_safe(byte.into() as u8) {","highlight_start":1,"highlight_end":73},{"text":"        CONSOLE.panic(format!(\"{err}\"))","highlight_start":1,"highlight_end":40},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn iter(self: &Self) -> Iter<u8> {","highlight_start":1,"highlight_end":43},{"text":"      self.buffer.iter()","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn iter_mut(self: &mut Self) -> IterMut<u8> {","highlight_start":1,"highlight_end":54},{"text":"      self.buffer.iter_mut()","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn is_empty(self: &Self) -> bool {","highlight_start":1,"highlight_end":43},{"text":"      self.buffer.is_empty()","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn clear(self: &mut Self) -> &mut Self {","highlight_start":1,"highlight_end":49},{"text":"      self.buffer_mut().clear();","highlight_start":1,"highlight_end":33},{"text":"      self","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn bytes(self: &Self) -> &Vec<u8> {","highlight_start":1,"highlight_end":44},{"text":"      self.buffer.bytes()","highlight_start":1,"highlight_end":26},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn bytes_mut(self: &mut Self) -> &mut Vec<u8> {","highlight_start":1,"highlight_end":56},{"text":"      self.buffer.bytes_mut()","highlight_start":1,"highlight_end":30},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod bytes {","highlight_start":1,"highlight_end":14},{"text":"    pub fn is_whitespace(self: &Self) -> bool {","highlight_start":1,"highlight_end":48},{"text":"      self.iter().all(|&b| b.is_ascii_whitespace())","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod conversions {","highlight_start":1,"highlight_end":20},{"text":"    pub fn to_string(self: &Self) -> String {","highlight_start":1,"highlight_end":46},{"text":"      String::from_utf8_lossy(self.bytes().as_slice()).to_string()","highlight_start":1,"highlight_end":67},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn chars(self: &Self) -> IntoIter<char> {","highlight_start":1,"highlight_end":50},{"text":"      let string = String::from_utf8(self.bytes().clone())","highlight_start":1,"highlight_end":59},{"text":"        .expect(\"Invalid UTF-8 sequence\");","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      string.chars().collect::<Vec<char>>().into_iter()","highlight_start":1,"highlight_end":56},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod ansi_styles {","highlight_start":1,"highlight_end":20},{"text":"    #[doc = \"Reset all styles and effects.\"]","highlight_start":1,"highlight_end":45},{"text":"    pub fn reset(self: &Self) -> Self {","highlight_start":1,"highlight_end":40},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer: self.buffer.clone(),","highlight_start":1,"highlight_end":37},{"text":"        global_effects: EffectArray::new(),","highlight_start":1,"highlight_end":44},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Bold`\"]","highlight_start":1,"highlight_end":57},{"text":"    pub fn bold(self: &Self) -> Self {","highlight_start":1,"highlight_end":39},{"text":"      self.push_effect(Effect::Bold)","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Italic`\"]","highlight_start":1,"highlight_end":59},{"text":"    pub fn italic(self: &Self) -> Self {","highlight_start":1,"highlight_end":41},{"text":"      self.push_effect(Effect::Italic)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Underline`\"]","highlight_start":1,"highlight_end":62},{"text":"    pub fn underline(self: &Self) -> Self {","highlight_start":1,"highlight_end":44},{"text":"      self.push_effect(Effect::Underline)","highlight_start":1,"highlight_end":42},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Blink`\"]","highlight_start":1,"highlight_end":58},{"text":"    pub fn blink(self: &Self) -> Self {","highlight_start":1,"highlight_end":40},{"text":"      self.push_effect(Effect::Blink)","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Inverse`\"]","highlight_start":1,"highlight_end":60},{"text":"    pub fn inverse(self: &Self) -> Self {","highlight_start":1,"highlight_end":42},{"text":"      self.push_effect(Effect::Inverse)","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Hidden`\"]","highlight_start":1,"highlight_end":59},{"text":"    pub fn hidden(self: &Self) -> Self {","highlight_start":1,"highlight_end":41},{"text":"      self.push_effect(Effect::Hidden)","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Sets a global effect: \\n - `Effect::Strikethrough`\"]","highlight_start":1,"highlight_end":66},{"text":"    pub fn strike(self: &Self) -> Self {","highlight_start":1,"highlight_end":41},{"text":"      self.push_effect(Effect::Strikethrough)","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[doc = \"Pushes a new global effect.\"]","highlight_start":1,"highlight_end":43},{"text":"    pub fn push_effect(self: &Self, effect: impl Into<Effect>) -> Self {","highlight_start":1,"highlight_end":73},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer: self.buffer.clone(),","highlight_start":1,"highlight_end":37},{"text":"        global_effects: {","highlight_start":1,"highlight_end":26},{"text":"          let mut styles = self.global_effects.clone();","highlight_start":1,"highlight_end":56},{"text":"          styles.push(effect.into());","highlight_start":1,"highlight_end":38},{"text":"          styles","highlight_start":1,"highlight_end":17},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod ansi_implementations {","highlight_start":1,"highlight_end":29},{"text":"    pub fn render_ansi(self: &Self) -> Self {","highlight_start":1,"highlight_end":46},{"text":"      if std::env::var(\"NO_COLOR\").is_ok() {","highlight_start":1,"highlight_end":45},{"text":"        return self.strip_ansi();","highlight_start":1,"highlight_end":34},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut result = Self::new();","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if self.bytes().is_empty() {","highlight_start":1,"highlight_end":35},{"text":"        return result;","highlight_start":1,"highlight_end":23},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut active_styles = self.global_effects().effects().clone();","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut tag_stack: Vec<String> = Vec::new();","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      for style in &active_styles {","highlight_start":1,"highlight_end":36},{"text":"        result.push_str(style.to_ansi());","highlight_start":1,"highlight_end":42},{"text":"        tag_stack.push(style.clone().to_string());","highlight_start":1,"highlight_end":51},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut iter = self.chars().peekable();","highlight_start":1,"highlight_end":46},{"text":"      while let Some(ch) = iter.next() {","highlight_start":1,"highlight_end":41},{"text":"        match ch {","highlight_start":1,"highlight_end":19},{"text":"          ':' => {","highlight_start":1,"highlight_end":19},{"text":"            if let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":50},{"text":"              if next_ch == ':' {","highlight_start":1,"highlight_end":34},{"text":"                result.push_str(\"::\");","highlight_start":1,"highlight_end":39},{"text":"                iter.next();","highlight_start":1,"highlight_end":29},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut code = String::new();","highlight_start":1,"highlight_end":42},{"text":"            let mut ended = false;","highlight_start":1,"highlight_end":35},{"text":"            while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":53},{"text":"              if next_ch == ':' {","highlight_start":1,"highlight_end":34},{"text":"                ended = true;","highlight_start":1,"highlight_end":30},{"text":"                iter.next();","highlight_start":1,"highlight_end":29},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              iter.next();","highlight_start":1,"highlight_end":27},{"text":"              if next_ch == ' ' {","highlight_start":1,"highlight_end":34},{"text":"                ended = true;","highlight_start":1,"highlight_end":30},{"text":"                result.push_str(format!(\":{code} \"));","highlight_start":1,"highlight_end":54},{"text":"                code.clear();","highlight_start":1,"highlight_end":30},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              code.push(next_ch);","highlight_start":1,"highlight_end":34},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if !ended {","highlight_start":1,"highlight_end":24},{"text":"              if code.is_empty() {","highlight_start":1,"highlight_end":35},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              result.push_str(format!(\":{code}\"));","highlight_start":1,"highlight_end":51},{"text":"              continue;","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if code.is_empty() {","highlight_start":1,"highlight_end":33},{"text":"              continue;","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match Tags::try_from(code.as_str()) {","highlight_start":1,"highlight_end":50},{"text":"              Some(code_enum) => {","highlight_start":1,"highlight_end":35},{"text":"                match code_enum.to_ansi() {","highlight_start":1,"highlight_end":44},{"text":"                  Some(ansi) => result.push_str(ansi.to_string()),","highlight_start":1,"highlight_end":67},{"text":"                  None => result.push_str(format!(\":{code}:\"))","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              },","highlight_start":1,"highlight_end":17},{"text":"              None => result.push_str(format!(\":{code}:\"))","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          '<' => {","highlight_start":1,"highlight_end":19},{"text":"            if let Some(next) = iter.peek() {","highlight_start":1,"highlight_end":46},{"text":"              if next == &'>' {","highlight_start":1,"highlight_end":32},{"text":"                result.push_str(\"<>\");","highlight_start":1,"highlight_end":39},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              if next == &'<' {","highlight_start":1,"highlight_end":32},{"text":"                result.push('<');","highlight_start":1,"highlight_end":34},{"text":"                while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":57},{"text":"                  if next_ch != '<' {","highlight_start":1,"highlight_end":38},{"text":"                    break;","highlight_start":1,"highlight_end":27},{"text":"                  }","highlight_start":1,"highlight_end":20},{"text":"                  iter.next();","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut tag = String::new();","highlight_start":1,"highlight_end":41},{"text":"            let mut is_closing_tag = false;","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":53},{"text":"              iter.next();","highlight_start":1,"highlight_end":27},{"text":"              if next_ch == '>' {","highlight_start":1,"highlight_end":34},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              if next_ch == '/' && tag.is_empty() {","highlight_start":1,"highlight_end":52},{"text":"                is_closing_tag = true;","highlight_start":1,"highlight_end":39},{"text":"              } else {","highlight_start":1,"highlight_end":23},{"text":"                tag.push(next_ch);","highlight_start":1,"highlight_end":35},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if tag.is_empty() {","highlight_start":1,"highlight_end":32},{"text":"              continue;","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if is_closing_tag {","highlight_start":1,"highlight_end":32},{"text":"              let last_pos = tag_stack.iter().rposition(|t| *t == tag);","highlight_start":1,"highlight_end":72},{"text":"              if let Some(last_effect) = active_styles.last() {","highlight_start":1,"highlight_end":64},{"text":"                if let Some(effect) = Effect::try_from(&tag) {","highlight_start":1,"highlight_end":63},{"text":"                  if last_effect.ne(&effect) {","highlight_start":1,"highlight_end":47},{"text":"                    if last_pos.is_none() {","highlight_start":1,"highlight_end":44},{"text":"                      CONSOLE.panic(format!(\"You're trying to close the tag </{tag}> before opening it.\\nWhich is illegal\"));","highlight_start":1,"highlight_end":126},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    let last_tag = last_effect.clone().to_string().to_lowercase();","highlight_start":1,"highlight_end":83},{"text":"                    CONSOLE.panic(format!(\"You're trying to close the tag </{tag}> before </{last_tag}>.\\nWhich is illegal\"));","highlight_start":1,"highlight_end":127},{"text":"                  }","highlight_start":1,"highlight_end":20},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              if let Some(pos) = last_pos {","highlight_start":1,"highlight_end":44},{"text":"                tag_stack.truncate(pos);","highlight_start":1,"highlight_end":41},{"text":"                active_styles.truncate(pos);","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                result.push_str(Effect::Reset);","highlight_start":1,"highlight_end":48},{"text":"                for style in &active_styles {","highlight_start":1,"highlight_end":46},{"text":"                  result.push_str(style.to_ansi());","highlight_start":1,"highlight_end":52},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              } else {","highlight_start":1,"highlight_end":23},{"text":"                result.push_str(format!(\"</{tag}>\"));","highlight_start":1,"highlight_end":54},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"              match Effect::try_from(&tag) {","highlight_start":1,"highlight_end":45},{"text":"                Some(effect) => {","highlight_start":1,"highlight_end":34},{"text":"                  active_styles.push(effect.clone());","highlight_start":1,"highlight_end":54},{"text":"                  tag_stack.push(tag.clone());","highlight_start":1,"highlight_end":47},{"text":"                  result.push_str(effect.to_ansi());","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                None => {","highlight_start":1,"highlight_end":26},{"text":"                  result.push_str(format!(\"<{tag}>\"));","highlight_start":1,"highlight_end":55},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          _ => {","highlight_start":1,"highlight_end":17},{"text":"            if ch == '>' {","highlight_start":1,"highlight_end":27},{"text":"              if let Some(next) = iter.peek() {","highlight_start":1,"highlight_end":48},{"text":"                if next == &'>' {","highlight_start":1,"highlight_end":34},{"text":"                  result.push('>');","highlight_start":1,"highlight_end":36},{"text":"                  while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":59},{"text":"                    if next_ch != '>' {","highlight_start":1,"highlight_end":40},{"text":"                      break;","highlight_start":1,"highlight_end":29},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    iter.next();","highlight_start":1,"highlight_end":33},{"text":"                  }","highlight_start":1,"highlight_end":20},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"              result.push(ch);","highlight_start":1,"highlight_end":31},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if !active_styles.is_empty() {","highlight_start":1,"highlight_end":37},{"text":"        while tag_stack.pop().is_some() {","highlight_start":1,"highlight_end":42},{"text":"          if active_styles.pop().is_some() {","highlight_start":1,"highlight_end":45},{"text":"            result.push_str(Effect::Reset);","highlight_start":1,"highlight_end":44},{"text":"            for style in &active_styles {","highlight_start":1,"highlight_end":42},{"text":"              result.push_str(style.to_ansi());","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      result.push_str(Effect::Reset);","highlight_start":1,"highlight_end":38},{"text":"      result","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn strip_ansi(self: &Self) -> Self {","highlight_start":1,"highlight_end":45},{"text":"      let mut result = Self::new();","highlight_start":1,"highlight_end":36},{"text":"      if self.bytes().is_empty() {","highlight_start":1,"highlight_end":35},{"text":"        return result;","highlight_start":1,"highlight_end":23},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut iter = self.chars().peekable();","highlight_start":1,"highlight_end":46},{"text":"      while let Some(ch) = iter.next() {","highlight_start":1,"highlight_end":41},{"text":"        match ch {","highlight_start":1,"highlight_end":19},{"text":"          ':' => {","highlight_start":1,"highlight_end":19},{"text":"            let mut code = String::new();","highlight_start":1,"highlight_end":42},{"text":"            while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":53},{"text":"              if next_ch == ':' {","highlight_start":1,"highlight_end":34},{"text":"                iter.next();","highlight_start":1,"highlight_end":29},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"              code.push(next_ch);","highlight_start":1,"highlight_end":34},{"text":"              iter.next();","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match Tags::try_from(code.as_str()) {","highlight_start":1,"highlight_end":50},{"text":"              Some(code_enum) => {","highlight_start":1,"highlight_end":35},{"text":"                match code_enum.to_ansi() {","highlight_start":1,"highlight_end":44},{"text":"                  Some(ansi) => result.push_str(ansi.strip_ansi().to_string()),","highlight_start":1,"highlight_end":80},{"text":"                  None => result.push_str(format!(\":{code}:\"))","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              },","highlight_start":1,"highlight_end":17},{"text":"              None => result.push_str(format!(\":{code}:\"))","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          '<' => {","highlight_start":1,"highlight_end":19},{"text":"            if let Some(next) = iter.peek() {","highlight_start":1,"highlight_end":46},{"text":"              if next == &'<' {","highlight_start":1,"highlight_end":32},{"text":"                result.push('<');","highlight_start":1,"highlight_end":34},{"text":"                iter.next();","highlight_start":1,"highlight_end":29},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut tag = String::new();","highlight_start":1,"highlight_end":41},{"text":"            while let Some(&next_ch) = iter.peek() {","highlight_start":1,"highlight_end":53},{"text":"              iter.next();","highlight_start":1,"highlight_end":27},{"text":"              if next_ch == '>' {","highlight_start":1,"highlight_end":34},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              if !(next_ch == '/' && tag.is_empty()) {","highlight_start":1,"highlight_end":55},{"text":"                tag.push(next_ch);","highlight_start":1,"highlight_end":35},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if Effect::try_from(&tag).is_none() {","highlight_start":1,"highlight_end":50},{"text":"              result.push_str(format!(\"<{tag}>\"));","highlight_start":1,"highlight_end":51},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          _ => {","highlight_start":1,"highlight_end":17},{"text":"            if ch == '>' {","highlight_start":1,"highlight_end":27},{"text":"              if let Some(next) = iter.peek() {","highlight_start":1,"highlight_end":48},{"text":"                if next == &'>' {","highlight_start":1,"highlight_end":34},{"text":"                  result.push('>');","highlight_start":1,"highlight_end":36},{"text":"                  iter.next();","highlight_start":1,"highlight_end":31},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"              result.push(ch);","highlight_start":1,"highlight_end":31},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      result","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod implementations {","highlight_start":1,"highlight_end":24},{"text":"    pub fn nearest(self: &Self, args: Vec<String>) -> Option<String> {","highlight_start":1,"highlight_end":71},{"text":"      let self_str = String::from_utf8(self.bytes().clone())","highlight_start":1,"highlight_end":61},{"text":"        .expect(\"Invalid UTF-8 sequence\");","highlight_start":1,"highlight_end":43},{"text":"      let mut nearest_word: Option<String> = None;","highlight_start":1,"highlight_end":51},{"text":"      let mut min_distance = self.buffer.bytes().capacity().min(usize::MAX);","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      for arg in args {","highlight_start":1,"highlight_end":24},{"text":"        let distance = levenshtein::levenshtein(&self_str, &arg);","highlight_start":1,"highlight_end":66},{"text":"        if distance < min_distance {","highlight_start":1,"highlight_end":37},{"text":"          min_distance = distance;","highlight_start":1,"highlight_end":35},{"text":"          nearest_word = Some(arg);","highlight_start":1,"highlight_end":36},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if min_distance == 0 || min_distance <= 2 {","highlight_start":1,"highlight_end":50},{"text":"        nearest_word","highlight_start":1,"highlight_end":21},{"text":"      } else {","highlight_start":1,"highlight_end":15},{"text":"        None","highlight_start":1,"highlight_end":13},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn append(self: &mut Self, other: &Self) {","highlight_start":1,"highlight_end":51},{"text":"      self.buffer_mut().extend_from_buffer(other.buffer());","highlight_start":1,"highlight_end":60},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn char_at(self: &Self, index: usize) -> Option<char> {","highlight_start":1,"highlight_end":64},{"text":"      self.buffer().byte_at(index).map(char::from)","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn concat(self: &Self, other: &Self) -> Self {","highlight_start":1,"highlight_end":55},{"text":"      let mut buffer = self.buffer.clone();","highlight_start":1,"highlight_end":44},{"text":"      buffer.extend_from_buffer(other.buffer());","highlight_start":1,"highlight_end":49},{"text":"      Self {","highlight_start":1,"highlight_end":13},{"text":"        buffer,","highlight_start":1,"highlight_end":16},{"text":"        global_effects: self.global_effects.clone(),","highlight_start":1,"highlight_end":53},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn contains(self: &Self, c: char) -> bool {","highlight_start":1,"highlight_end":52},{"text":"      self.index_of(c).is_some()","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn ends_with(self: &Self, suffix: impl Into<String>) -> bool {","highlight_start":1,"highlight_end":71},{"text":"      self.bytes().ends_with(suffix.into().as_bytes())","highlight_start":1,"highlight_end":55},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn includes(self: &Self, needle: impl Into<String>) -> bool {","highlight_start":1,"highlight_end":70},{"text":"      let needle = needle.into();","highlight_start":1,"highlight_end":34},{"text":"      if needle.trim().is_empty() || needle.len() > self.len() {","highlight_start":1,"highlight_end":65},{"text":"        return needle.eq(&self.to_string());","highlight_start":1,"highlight_end":45},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      self.bytes().windows(needle.bytes().len()).any(|window| window == needle.as_bytes())","highlight_start":1,"highlight_end":91},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn index_of(self: &Self, c: char) -> Option<usize> {","highlight_start":1,"highlight_end":61},{"text":"      self.iter().position(|&b| b == c as u8)","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn last_index_of(self: &Self, c: char) -> Option<usize> {","highlight_start":1,"highlight_end":66},{"text":"      self.iter().rposition(|&b| b == c as u8)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(unused_variables)]","highlight_start":1,"highlight_end":31},{"text":"    pub fn matches(self: &Self, pattern: impl Into<String>) -> bool {","highlight_start":1,"highlight_end":70},{"text":"      unimplemented!(\"StringV2::matches is not implemented yet.\");","highlight_start":1,"highlight_end":67},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(unused_variables)]","highlight_start":1,"highlight_end":31},{"text":"    pub fn matches_all(self: &Self, pattern: impl Into<String>) -> bool {","highlight_start":1,"highlight_end":74},{"text":"      unimplemented!(\"StringV2::matches_all is not implemented yet.\");","highlight_start":1,"highlight_end":71},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn pad_end(self: &Self, target_length: usize, pad_string: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":95},{"text":"      let pad_string = pad_string.into();","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if self.len() >= target_length {","highlight_start":1,"highlight_end":39},{"text":"        return self.clone();","highlight_start":1,"highlight_end":29},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut vec = Vec::with_capacity(target_length);","highlight_start":1,"highlight_end":55},{"text":"      vec.extend_from_slice(&self.bytes().to_vec());","highlight_start":1,"highlight_end":53},{"text":"      vec.extend_from_slice(pad_string.as_bytes());","highlight_start":1,"highlight_end":52},{"text":"      Self::from(vec)","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn pad_start(self: &Self, target_length: usize, pad_string: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":97},{"text":"      let pad_string = pad_string.into();","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if self.len() >= target_length {","highlight_start":1,"highlight_end":39},{"text":"        return self.clone();","highlight_start":1,"highlight_end":29},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut vec = Vec::with_capacity(target_length);","highlight_start":1,"highlight_end":55},{"text":"      vec.extend_from_slice(pad_string.as_bytes());","highlight_start":1,"highlight_end":52},{"text":"      vec.extend_from_slice(&self.bytes().to_vec());","highlight_start":1,"highlight_end":53},{"text":"      Self::from(vec)","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn position(self: &Self, string: impl Into<String>) -> Option<usize> {","highlight_start":1,"highlight_end":79},{"text":"      let string = string.into();","highlight_start":1,"highlight_end":34},{"text":"      self.bytes().windows(string.len()).position(|window| window == string.as_bytes())","highlight_start":1,"highlight_end":88},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn repeat(self: &Self, count: usize) -> Self {","highlight_start":1,"highlight_end":55},{"text":"      let mut vec = Vec::with_capacity(self.len() * count);","highlight_start":1,"highlight_end":60},{"text":"      for _ in 0..count {","highlight_start":1,"highlight_end":26},{"text":"        vec.extend_from_slice(&self.bytes().to_vec());","highlight_start":1,"highlight_end":55},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      Self::from(vec)","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn replace(self: &Self, from: impl Into<String>, to: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":90},{"text":"      let from = from.into();","highlight_start":1,"highlight_end":30},{"text":"      let to = to.into();","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if from.is_empty() {","highlight_start":1,"highlight_end":27},{"text":"        return self.clone();","highlight_start":1,"highlight_end":29},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut vec = Vec::with_capacity(self.len());","highlight_start":1,"highlight_end":52},{"text":"      let mut i = 0;","highlight_start":1,"highlight_end":21},{"text":"      if let Some(index) = self.bytes().windows(from.len()).position(|window| window == from.as_bytes()) {","highlight_start":1,"highlight_end":107},{"text":"        vec.extend_from_slice(&self.bytes()[i..i + index]);","highlight_start":1,"highlight_end":60},{"text":"        vec.extend_from_slice(to.as_bytes());","highlight_start":1,"highlight_end":46},{"text":"        i += index + from.len();","highlight_start":1,"highlight_end":33},{"text":"        vec.extend_from_slice(&self.bytes()[i..]);","highlight_start":1,"highlight_end":51},{"text":"      } else {","highlight_start":1,"highlight_end":15},{"text":"        vec.extend_from_slice(&self.bytes()[i..]);","highlight_start":1,"highlight_end":51},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self::from(vec)","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn replace_all(self: &Self, from: impl Into<String>, to: impl Into<String>) -> Self {","highlight_start":1,"highlight_end":94},{"text":"      let from = from.into();","highlight_start":1,"highlight_end":30},{"text":"      let to = to.into();","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      if from.is_empty() {","highlight_start":1,"highlight_end":27},{"text":"        return self.clone();","highlight_start":1,"highlight_end":29},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      let mut last = self.clone();","highlight_start":1,"highlight_end":35},{"text":"      let mut result = self.clone();","highlight_start":1,"highlight_end":37},{"text":"      while result.eq(&last) {","highlight_start":1,"highlight_end":31},{"text":"        result = result.replace(&from, &to);","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if result.eq(&last) {","highlight_start":1,"highlight_end":30},{"text":"          break;","highlight_start":1,"highlight_end":17},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        last = result.clone();","highlight_start":1,"highlight_end":31},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      result","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[allow(unused_variables)]","highlight_start":1,"highlight_end":31},{"text":"    pub fn search(self: &Self, pattern: impl Into<String>) -> Option<usize> {","highlight_start":1,"highlight_end":78},{"text":"      unimplemented!(\"StringV2::search is not implemented yet.\");","highlight_start":1,"highlight_end":66},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn slice(self: &Self, start: usize, end: Option<usize>) -> Self {","highlight_start":1,"highlight_end":74},{"text":"      let end = end.unwrap_or_else(|| self.len());","highlight_start":1,"highlight_end":51},{"text":"      let start = start.min(self.len());","highlight_start":1,"highlight_end":41},{"text":"      let end = end.min(self.len());","highlight_start":1,"highlight_end":37},{"text":"      if start >= end {","highlight_start":1,"highlight_end":24},{"text":"        return Self::new();","highlight_start":1,"highlight_end":28},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      Self::from(self.bytes()[start..end].to_vec())","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn split(self: &Self, separator: impl Into<String>) -> Vec<Self> {","highlight_start":1,"highlight_end":75},{"text":"      let separator = separator.into();","highlight_start":1,"highlight_end":40},{"text":"      let mut vec = Vec::new();","highlight_start":1,"highlight_end":32},{"text":"      let mut last = 0;","highlight_start":1,"highlight_end":24},{"text":"      for (i, _) in self.bytes().windows(separator.len()).enumerate() {","highlight_start":1,"highlight_end":72},{"text":"        if &self.bytes()[i..i + separator.len()] == separator.as_bytes() {","highlight_start":1,"highlight_end":75},{"text":"          vec.push(self.slice(last, Some(i)));","highlight_start":1,"highlight_end":47},{"text":"          last = i + separator.len();","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      vec.push(self.slice(last, None));","highlight_start":1,"highlight_end":40},{"text":"      vec","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn starts_with(self: &Self, prefix: impl Into<String>) -> bool {","highlight_start":1,"highlight_end":73},{"text":"      self.bytes().starts_with(prefix.into().as_bytes())","highlight_start":1,"highlight_end":57},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn substring(self: &Self, start: usize, end: usize) -> Self {","highlight_start":1,"highlight_end":70},{"text":"      self.slice(start, Some(end))","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn to_lowercase(self: &Self) -> Self {","highlight_start":1,"highlight_end":47},{"text":"      Self::from(self.bytes().to_ascii_lowercase())","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn to_uppercase(self: &Self) -> Self {","highlight_start":1,"highlight_end":47},{"text":"      Self::from(self.bytes().to_ascii_uppercase())","highlight_start":1,"highlight_end":52},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn trim(self: &Self) -> Self {","highlight_start":1,"highlight_end":39},{"text":"      let start = self.iter().position(|&b| b != b' ').unwrap_or(0);","highlight_start":1,"highlight_end":69},{"text":"      let end = self","highlight_start":1,"highlight_end":21},{"text":"        .iter()","highlight_start":1,"highlight_end":16},{"text":"        .rposition(|&b| b != b' ')","highlight_start":1,"highlight_end":35},{"text":"        .map_or(0, |pos| pos + 1);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      self.substring(start, end)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn trim_end(self: &Self) -> Self {","highlight_start":1,"highlight_end":43},{"text":"      let end = self","highlight_start":1,"highlight_end":21},{"text":"        .iter()","highlight_start":1,"highlight_end":16},{"text":"        .rposition(|&b| b != b' ')","highlight_start":1,"highlight_end":35},{"text":"        .map_or(0, |pos| pos + 1);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      self.substring(0, end)","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn trim_start(self: &Self) -> Self {","highlight_start":1,"highlight_end":45},{"text":"      let start = self.iter().position(|&b| b != b' ').unwrap_or(0);","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      self.substring(start, self.len())","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  mod compatibility {","highlight_start":1,"highlight_end":22},{"text":"    pub fn push_str(self: &mut Self, s: impl Into<String>) {","highlight_start":1,"highlight_end":61},{"text":"      let string = s.into();","highlight_start":1,"highlight_end":29},{"text":"      match self.buffer_mut().try_reserve(string.len()) {","highlight_start":1,"highlight_end":58},{"text":"        Ok(_) => self.bytes_mut().extend_from_slice(string.as_bytes()),","highlight_start":1,"highlight_end":72},{"text":"        Err(err) => CONSOLE.panic(format!(\"{err}\"))","highlight_start":1,"highlight_end":52},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"struct_gen!","def_site_span":{"file_name":"src/macros/struct_gen.rs","byte_start":836,"byte_end":859,"line_start":36,"line_end":36,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! struct_gen {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/string/mod.rs","byte_start":2430,"byte_end":2434,"line_start":122,"line_end":122,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    fn into(self: Self) -> String {","highlight_start":8,"highlight_end":12}],"label":null,"suggested_replacement":"from","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/string/mod.rs","byte_start":2435,"byte_end":2439,"line_start":122,"line_end":122,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    fn into(self: Self) -> String {","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"val: $struct_name","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/string/mod.rs","byte_start":2450,"byte_end":2456,"line_start":122,"line_end":122,"column_start":28,"column_end":34,"is_primary":true,"text":[{"text":"    fn into(self: Self) -> String {","highlight_start":28,"highlight_end":34}],"label":null,"suggested_replacement":"Self","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/string/mod.rs","byte_start":2465,"byte_end":2469,"line_start":123,"line_end":123,"column_start":7,"column_end":11,"is_primary":true,"text":[{"text":"      self.to_string()","highlight_start":7,"highlight_end":11}],"label":null,"suggested_replacement":"val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/macros/struct_gen.rs:133:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m      impl $($impl_path)::*$(<$($impl_generic),*>)? for $struct_name {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0msrc/string/mod.rs:37:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct_gen! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  pub struct StringV2 use PartialEq, PartialOrd, Eq, Ord {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(super) let &mut buffer: Buffer = Buffer::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let global_effects: EffectArray = EffectArray::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m786\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\u001b[0m\n\u001b[0m            https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `struct_gen` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}
